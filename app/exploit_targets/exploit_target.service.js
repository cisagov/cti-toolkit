angular.module('app.exploit_targets')
.service('et',['guid','utils','reference',function(guid,utils,reference){
	function et(){
		var et = {};
		et.name = 'Exploit_Target';
		et.element = 'stixCommon:Exploit_Target';
		et.tooltip = 'The ExploitTarget field characterizes potential targets for exploitation. In other words characteristics about targeted victims that may make them vulnerable to attack.';
		et.id = {name:'id',value:guid.guid(et.name)};
		et.timestamp = {name:'timestamp',value:guid.timestamp()};
		et.attributes = [
			{name:'xsi:type', value:'et:ExploitTargetType'},
			et.id,
			et.timestamp
		];
		et.title = {name:'Title',element:'et:Title',text:'',tooltip:'The Title field provides a simple title for this Exploit Target.'};
		et.description = {name:'Description',element:'et:Description',text:'',tooltip:'The Description field is optional and provides an unstructured, text description of this Exploit Target.'};
		et.vulnerabilities = {
			name:'Vulnerabilities',
			parent: 'Exploit Target',
			tooltip:'The Vulnerability field identifies and characterizes a Vulnerability as a potential ExploitTarget.',
			children:[],
			vulnerability: function(){
				var vulnerability = {};
				vulnerability.name = 'Vulnerability';
				vulnerability.element = 'et:Vulnerability';
				vulnerability.title = {
					name:'Title',
					parent:'Vulnerability',
					element:'et:Title',
					text:'',
					tooltip:'This field is optional and provides a title for this vulnerability.',
					autofocus: true
				};
				vulnerability.description = {
					name:'Description',
					parent:'Vulnerability',
					element:'et:Description',
					text:'',
					tooltip:'This field is optional and provides an unstructured, text description of an individual vulnerability.'
				};
				vulnerability.osvdb_id = {
					name:'OSVDB_ID',
					parent:'Vulnerability',
					element:'et:OSVDB_ID',
					text:'',
					tooltip:'The OSVDB_ID field specifies an OSVDB identifier for a particular vulnerability.',
					pattern:/^[1-9]\d*$/,
					validationtip:"Required format is one or more numbers (for example 123)"
				};
				vulnerability.cve_id = {
					name:'CVE_ID',
					parent:'Vulnerability',
					element:'et:CVE_ID',
					text:'',
					tooltip:'The CVE_ID field specifies a CVE identifier for a particular vulnerability.',
					pattern:/^CVE-\d\d\d\d-\d+$/,
					validationtip:"Required format is 'CVE', dash, four numbers, dash, one or more numbers (for example CVE-1234-56)"
				};
				
				vulnerability.children = [
					vulnerability.title,
					vulnerability.description,
					vulnerability.cve_id,
					vulnerability.osvdb_id
				];
				
				return vulnerability;
			},
			addVulnerability: function(vulnerability){
				if(typeof(vulnerability) === 'undefined'){
					vulnerability = this.vulnerability()
				}
				this.children.push(vulnerability);
			},
			delVulnerability: function(index){this.children.splice(index,1);}
		};
		et.potential_coas = {
			name:'Potential_COAs',
			element:'et:Potential_COAs',
			tooltip:'The Potential_COAs field specifies potential Courses of Action for this ExploitTarget.',
			list:[],
			children:[],
			updateRef:function(child){
				console.log('child');console.log(child);
				var id = utils.getObj('name','id',child.attributes);
				var refType = reference.reference('stixCommon',child);
				var options = {parent:['et:Potential_COA']};
				refType.update(child,options);
					
				if(this.list.indexOf(child) >= 0){
					var index = this.list.indexOf(child);
					this.list.splice(index,1);	
					this.children.splice(index,1);	
				} else {
					this.list.push(child);
					this.children.push(refType);
				}
			},
			cleanRef:function(stixObjectArray){
				toDelete = [];
				for(var index = 0; index < this.children.length; index++){
					var ref = this.children[index];
					if(stixObjectArray.indexOf(ref.object) < 0){
						this.updateRef(ref.object);
					}
					
				}
			}
		};
		
		et.children = [
			et.vulnerabilities,
			et.potential_coas
		];
		
		return et;
	};
	
	return {et:et};
}]);